import pandas as pd
import streamlit as st
import plotly.express as px
import os # Importa o m√≥dulo os para verificar a exist√™ncia do arquivo

# ==============================================================================
# ATEN√á√ÉO CR√çTICA:
# VOC√ä DEVE SUBSTITUIR 'NOME_REAL_DA_COLUNA_TIPO_DE_VOO'
# PELO NOME EXATO DA COLUNA NO SEU ARQUIVO CSV PARA O 'TIPO DE VOO'.
# EX: SE NO SEU CSV A COLUNA √â 'TIPO_VOO', MUDE PARA:
# COLUNA_TIPO_DE_VOO = 'TIPO_VOO'
# ==============================================================================
COLUNA_TIPO_DE_VOO = 'Tipo de Voo' # <<<< SUBSTITUA AQUI COM O NOME EXATO DO SEU CSV!


# --- 1. Configura√ß√µes Iniciais e Mapeamento de Meses ---

# Define um mapeamento de nomes de meses para n√∫meros para garantir a ordena√ß√£o correta nos gr√°ficos
month_to_num = {
    'Janeiro': 1, 'Fevereiro': 2, 'Mar√ßo': 3, 'Abril': 4, 'Maio': 5, 'Junho': 6,
    'Julho': 7, 'Agosto': 8, 'Setembro': 9, 'Outubro': 10, 'Novembro': 11, 'Dezembro': 12
}
# Define a ordem dos meses para filtros e gr√°ficos
month_order = list(month_to_num.keys())

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Dashboard de Tr√°fego A√©reo - Fortaleza", # T√≠tulo que aparece na aba do navegador
    layout="wide", # Define o layout da p√°gina como 'wide' para usar toda a largura dispon√≠vel
    initial_sidebar_state="expanded" # Faz com que a barra lateral comece expandida
)

st.title("‚úàÔ∏è Dashboard Interativo de Tr√°fego A√©reo - Fortaleza")
st.markdown("Este dashboard apresenta uma an√°lise do tr√°fego tur√≠stico a√©reo no Aeroporto de Fortaleza, Cear√°.")

# --- 2. Carregamento dos Dados ---
# Tenta carregar o arquivo CSV. Se o arquivo n√£o for encontrado, usa dados de exemplo para demonstra√ß√£o.
file_path = "TABELA ATUALIZADA.xlsx - Planilha1.csv"
try:
    # Carrega o arquivo CSV para um DataFrame pandas
    df = pd.read_csv(file_path)
    st.success(f"Dados carregados com sucesso de '{file_path}'!")
    st.info("‚ö†Ô∏è **Importante:** Este dashboard espera as colunas 'Ano', 'M√™s', 'Passageiros' e a coluna de Tipo de Voo (definida acima). Verifique se seu CSV as possui.")

except FileNotFoundError:
    st.error(f"Arquivo '{file_path}' n√£o encontrado. Carregando dados de exemplo para demonstra√ß√£o.")
    # Dados de exemplo para demonstra√ß√£o caso o arquivo n√£o seja encontrado.
    # Estes dados simulam a estrutura esperada do seu CSV.
    data = {
        'Ano': [2022, 2022, 2022, 2022, 2023, 2023, 2023, 2023, 2024, 2024, 2024, 2024],
        'M√™s': ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril'],
        'Tipo de Voo': ['Nacional', 'Internacional', 'Nacional', 'Internacional', 'Nacional', 'Internacional', 'Nacional', 'Internacional', 'Nacional', 'Internacional', 'Nacional', 'Internacional'],
        'Passageiros': [10000, 5000, 12000, 6000, 11000, 6500, 13000, 7000, 12000, 7500, 14000, 8000]
    }
    df = pd.DataFrame(data)
    # Se usando dados de exemplo, a coluna 'Tipo de Voo' √© definida automaticamente.
    # Se a constante COLUNA_TIPO_DE_VOO for diferente, ela ser√° ignorada para os dados de exemplo.
    st.warning("Por favor, substitua os dados de exemplo pelos seus dados reais para uma an√°lise completa.")


# --- 3. Pr√©-processamento dos Dados (Com Verifica√ß√µes e Corre√ß√µes Robustas) ---
if not df.empty:
    st.subheader("üõ†Ô∏è Verifica√ß√£o e Limpeza dos Dados")

    # Mostrar as primeiras linhas do DF e seus tipos de dados antes do processamento
    st.write("#### 1. Dados Brutos (Primeiras Linhas):")
    st.dataframe(df.head())
    st.write("#### 2. Tipos de Dados Originais:")
    st.text(df.dtypes) # Usar st.text para exibir dtypes no dashboard

    # --- Limpeza e Valida√ß√£o da coluna 'M√™s' ---
    if 'M√™s' in df.columns:
        # 1. Limpeza da coluna 'M√™s': Remove espa√ßos em branco e capitaliza a primeira letra de cada palavra
        df['M√™s'] = df['M√™s'].astype(str).str.strip().str.capitalize()
        st.write("#### 3. Valores √önicos da Coluna 'M√™s' Ap√≥s Limpeza:")
        st.text(df['M√™s'].unique()) # Mostrar os meses √∫nicos ap√≥s a limpeza
    else:
        st.error("‚ùå Erro Cr√≠tico: Coluna 'M√™s' n√£o encontrada no seu arquivo CSV. Por favor, verifique o nome da coluna no seu CSV.")
        st.stop() # Para a execu√ß√£o se a coluna crucial estiver faltando

    # --- Valida√ß√£o e Convers√£o da coluna 'Ano' ---
    if 'Ano' in df.columns:
        # Tenta converter 'Ano' para num√©rico, for√ßando erros para NaN e depois removendo-os
        df['Ano'] = pd.to_numeric(df['Ano'], errors='coerce')
        if df['Ano'].isnull().any():
            st.warning("‚ö†Ô∏è Foram encontrados valores n√£o num√©ricos ou em branco na coluna 'Ano'. As linhas com problemas ser√£o removidas.")
            df.dropna(subset=['Ano'], inplace=True)
        # Ap√≥s garantir que s√£o n√∫meros, converte para inteiro
        df['Ano'] = df['Ano'].astype(int)
    else:
        st.error("‚ùå Erro Cr√≠tico: Coluna 'Ano' n√£o encontrada no seu arquivo CSV. Por favor, verifique o nome da coluna no seu CSV.")
        st.stop()
    
    # --- Valida√ß√£o da coluna 'Passageiros' ---
    if 'Passageiros' in df.columns:
        df['Passageiros'] = pd.to_numeric(df['Passageiros'], errors='coerce')
        if df['Passageiros'].isnull().any():
            st.warning("‚ö†Ô∏è Foram encontrados valores n√£o num√©ricos ou em branco na coluna 'Passageiros'. As linhas com problemas ser√£o removidas.")
            df.dropna(subset=['Passageiros'], inplace=True)
    else:
        st.error("‚ùå Erro Cr√≠tico: Coluna '
