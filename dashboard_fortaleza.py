import pandas as pd
import streamlit as st
import plotly.express as px
import os # Importa o m√≥dulo os para verificar a exist√™ncia do arquivo

# ==============================================================================
# ATEN√á√ÉO CR√çTICA:
# VOC√ä DEVE SUBSTITUIR 'Tipo de Voo' ABAIXO
# PELO NOME EXATO DA COLUNA NO SEU ARQUIVO CSV PARA O 'TIPO DE VOO'.
# CERTIFIQUE-SE DE QUE ESTEJA ENTRE ASPAS SIMPLES!
# EX: SE NO SEU CSV A COLUNA √â 'TIPO_VOO', MUDE PARA:
# COLUNA_TIPO_DE_VOO = 'TIPO_VOO'
# ==============================================================================
COLUNA_TIPO_DE_VOO = 'Tipo de Voo' # <<<< SUBSTITUA APENAS O TEXTO ENTRE ASPAS AQUI!

# --- Verifica√ß√£o de tipo da constante COLUNA_TIPO_DE_VOO (DEBUG) ---
if not isinstance(COLUNA_TIPO_DE_VOO, str):
    st.error("‚ùå ERRO GRAVE: A vari√°vel COLUNA_TIPO_DE_VOO n√£o est√° definida como um texto (string).")
    st.error("Por favor, certifique-se de que est√° entre aspas simples, por exemplo: COLUNA_TIPO_DE_VOO = 'Meu Tipo de Voo'")
    st.stop() # Interrompe a execu√ß√£o para que voc√™ possa corrigir

# --- 1. Configura√ß√µes Iniciais e Mapeamento de Meses ---

# Define um mapeamento de nomes de meses para n√∫meros para garantir a ordena√ß√£o correta nos gr√°ficos
month_to_num = {
    'Janeiro': 1, 'Fevereiro': 2, 'Mar√ßo': 3, 'Abril': 4, 'Maio': 5, 'Junho': 6,
    'Julho': 7, 'Agosto': 8, 'Setembro': 9, 'Outubro': 10, 'Novembro': 11, 'Dezembro': 12
}
# Define a ordem dos meses para filtros e gr√°ficos
month_order = list(month_to_num.keys())

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Dashboard de Tr√°fego A√©reo - Fortaleza", # T√≠tulo que aparece na aba do navegador
    layout="wide", # Define o layout da p√°gina como 'wide' para usar toda a largura dispon√≠vel
    initial_sidebar_state="expanded" # Faz com que a barra lateral comece expandida
)

st.title("‚úàÔ∏è Dashboard Interativo de Tr√°fego A√©reo - Fortaleza")
st.markdown("Este dashboard apresenta uma an√°lise do tr√°fego tur√≠stico a√©reo no Aeroporto de Fortaleza, Cear√°.")

# --- 2. Carregamento dos Dados ---
# Tenta carregar o arquivo CSV. Se o arquivo n√£o for encontrado, usa dados de exemplo para demonstra√ß√£o.
file_path = "TABELA ATUALIZADA.xlsx - Planilha1.csv"
df = pd.DataFrame() # Inicializa df para evitar erro se nenhum dado for carregado
try:
    # Carrega o arquivo CSV para um DataFrame pandas
    df = pd.read_csv(file_path)
    st.success(f"Dados carregados com sucesso de '{file_path}'!")
    st.info("‚ö†Ô∏è **Importante:** Este dashboard espera as colunas 'Ano', 'M√™s', 'Passageiros' e a coluna de Tipo de Voo (definida acima). Verifique se seu CSV as possui.")
    
    # --- LINHA PARA DEBUGAR: MOSTRAR NOMES DAS COLUNAS (TEMPOR√ÅRIO) ---
    st.subheader("üí° **DEBUG:** Nomes das Colunas no seu CSV:")
    st.write(df.columns.tolist()) # Isso exibir√° a lista exata de nomes das colunas no seu dashboard
    st.markdown("---") # Separador para facilitar a leitura
    # --- FIM DA LINHA DE DEBUG ---

except FileNotFoundError:
    st.error(f"Arquivo '{file_path}' n√£o encontrado. Carregando dados de exemplo para demonstra√ß√£o.")
    # Dados de exemplo para demonstra√ß√£o caso o arquivo n√£o seja encontrado.
    # Estes dados simulam a estrutura esperada do seu CSV.
    data = {
        'Ano': [2022, 2022, 2022, 2022, 2023, 2023, 2023, 2023, 2024, 2024, 2024, 2024],
        'M√™s': ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril'],
        'Tipo de Voo': ['Nacional', 'Internacional', 'Nacional', 'Internacional', 'Nacional', 'Internacional', 'Nacional', 'Internacional', 'Nacional', 'Internacional', 'Nacional', 'Internacional'],
        'Passageiros': [10000, 5000, 12000, 6000, 11000, 6500, 13000, 7000, 12000, 7500, 14000, 8000]
    }
    df = pd.DataFrame(data)
    # Se usando dados de exemplo, a coluna 'Tipo de Voo' √© definida automaticamente.
    # Se a constante COLUNA_TIPO_DE_VOO for diferente, ela ser√° ignorada para os dados de exemplo.
    st.warning("Por favor, substitua os dados de exemplo pelos seus dados reais para uma an√°lise completa.")


# --- 3. Pr√©-processamento dos Dados (Com Verifica√ß√µes e Corre√ß√µes Robustas) ---
if not df.empty:
    st.subheader("üõ†Ô∏è Verifica√ß√£o e Limpeza dos Dados")

    # Mostrar as primeiras linhas do DF e seus tipos de dados antes do processamento
    st.write("#### 1. Dados Brutos (Primeiras Linhas):")
    st.dataframe(df.head())
    st.write("#### 2. Tipos de Dados Originais:")
    st.text(df.dtypes) # Usar st.text para exibir dtypes no dashboard

    # --- Limpeza e Valida√ß√£o da coluna 'M√™s' ---
    if 'M√™s' in df.columns:
        # 1. Limpeza da coluna 'M√™s': Remove espa√ßos em branco e capitaliza a primeira letra de cada palavra
        df['M√™s'] = df['M√™s'].astype(str).str.strip().str.capitalize()
        st.write("#### 3. Valores √önicos da Coluna 'M√™s' Ap√≥s Limpeza:")
        st.text(df['M√™s'].unique()) # Mostrar os meses √∫nicos ap√≥s a limpeza
    else:
        st.error("‚ùå Erro Cr√≠tico: Coluna 'M√™s' n√£o encontrada no seu arquivo CSV. Por favor, verifique o nome da coluna no seu CSV.")
        st.stop() # Para a execu√ß√£o se a coluna crucial estiver faltando

    # --- Valida√ß√£o e Convers√£o da coluna 'Ano' ---
    if 'Ano' in df.columns:
        # Tenta converter 'Ano' para num√©rico, for√ßando erros para NaN e depois removendo-os
        df['Ano'] = pd.to_numeric(df['Ano'], errors='coerce')
        if df['Ano'].isnull().any():
            st.warning("‚ö†Ô∏è Foram encontrados valores n√£o num√©ricos ou em branco na coluna 'Ano'. As linhas com problemas ser√£o removidas.")
            df.dropna(subset=['Ano'], inplace=True)
        # Ap√≥s garantir que s√£o n√∫meros, converte para inteiro
        df['Ano'] = df['Ano'].astype(int)
    else:
        st.error("‚ùå Erro Cr√≠tico: Coluna 'Ano' n√£o encontrada no seu arquivo CSV. Por favor, verifique o nome da coluna no seu CSV.")
        st.stop()
    
    # --- Valida√ß√£o da coluna 'Passageiros' ---
    if 'Passageiros' in df.columns:
        df['Passageiros'] = pd.to_numeric(df['Passageiros'], errors='coerce')
        if df['Passageiros'].isnull().any():
            st.warning("‚ö†Ô∏è Foram encontrados valores n√£o num√©ricos ou em branco na coluna 'Passageiros'. As linhas com problemas ser√£o removidas.")
            df.dropna(subset=['Passageiros'], inplace=True)
    else:
        st.error("‚ùå Erro Cr√≠tico: Coluna 'Passageiros' n√£o encontrada no seu arquivo CSV. Por favor, verifique o nome da coluna no seu CSV.")
        st.stop()

    # Cria uma coluna num√©rica para o m√™s usando o mapeamento
    # Se algum m√™s n√£o for encontrado no 'month_to_num', ele se tornar√° NaN
    df['M√™s_Num'] = df['M√™s'].map(month_to_num)

    # --- Verifica√ß√£o de M√™s_Num ap√≥s mapeamento ---
    if df['M√™s_Num'].isnull().any():
        st.warning("‚ö†Ô∏è Foram encontrados meses no seu CSV que N√ÉO PUDERAM SER MAPEADOS (resultaram em NaN). Verifique a coluna 'M√™s' para typos ou formatos inesperados.")
        st.dataframe(df[df['M√™s_Num'].isnull()]) # Mostra as linhas com problema
        # Remove linhas com meses inv√°lidos se n√£o for poss√≠vel corrigi-los, para evitar erros futuros
        df.dropna(subset=['M√™s_Num'], inplace=True)
        st.info("Linhas com meses inv√°lidos (n√£o mapeados) foram removidas para evitar erros.")

    # --- Cria√ß√£o e Valida√ß√£o da coluna 'Data' ---
    # 'errors='coerce'' vai transformar qualquer erro de convers√£o em NaT (Not a Time)
    df['Data'] = pd.to_datetime(
        df['Ano'].astype(str) + '-' + df['M√™s_Num'].astype(str) + '-01',
        errors='coerce'
    )

    # --- Verifica√ß√£o de Data ap√≥s convers√£o ---
    if df['Data'].isnull().any():
        st.warning("‚ö†Ô∏è Foram encontradas datas inv√°lidas (NaT) ap√≥s a convers√£o. As linhas com datas inv√°lidas ser√£o removidas para evitar erros nos gr√°ficos.")
        st.dataframe(df[df['Data'].isnull()]) # Mostra as linhas com datas problem√°ticas
        df.dropna(subset=['Data'], inplace=True) # Remover linhas com datas inv√°lidas
    
    # Verifica o tipo final da coluna 'Data' para garantir que √© datetime
    if not pd.api.types.is_datetime64_any_dtype(df['Data']):
        st.error("‚ùå Erro Final: A coluna 'Data' n√£o foi convertida para o tipo datetime. Isso indica um problema grave nos dados de Ano ou M√™s que n√£o p√¥de ser corrigido.")
        st.stop() # Para a execu√ß√£o se a coluna cr√≠tica n√£o for do tipo correto

    # Ordena o DataFrame pela coluna 'Data' para garantir a correta exibi√ß√£o nos gr√°ficos de tempo
    df = df.sort_values(by='Data')
    
    st.write("#### 4. Dados Processados (Primeiras Linhas e Tipos Finais):")
    st.dataframe(df.head())
    st.write("#### 5. Tipos de Dados Finais:")
    st.text(df.dtypes)

# --- 4. Barra Lateral para Filtros ---
# S√≥ exibe os filtros se o DataFrame n√£o estiver vazio ap√≥s o pr√©-processamento
if not df.empty:
    st.sidebar.header("‚öôÔ∏è Filtros de An√°lise")

    # Filtro por Ano: Permite selecionar um ou mais anos
    anos_disponiveis = sorted(df['Ano'].unique())
    ano_selecionado = st.sidebar.multiselect(
        "Selecione o(s) Ano(s)",
        options=anos_disponiveis,
        default=anos_disponiveis # Por padr√£o, todos os anos s√£o selecionados
    )

    # Filtro por M√™s: Permite selecionar um ou mais meses
    meses_selecionados = st.sidebar.multiselect(
        "Selecione o(s) M√™s(es)",
        options=month_order, # Usa a ordem predefinida dos meses
        default=month_order # Por padr√£o, todos os meses s√£o selecionados
    )

    # Filtro por Tipo de Voo: Verifica se a coluna de Tipo de Voo existe antes de criar o filtro
    # Usa a constante COLUNA_TIPO_DE_VOO
    if COLUNA_TIPO_DE_VOO in df.columns:
        tipos_voo_disponiveis = df[COLUNA_TIPO_DE_VOO].unique()
        tipo_voo_selecionado = st.sidebar.multiselect(
            "Selecione o Tipo de Voo",
            options=tipos_voo_disponiveis,
            default=tipos_voo_disponiveis # Por padr√£o, todos os tipos de voo s√£o selecionados
        )
    else:
        tipo_voo_selecionado = None
        st.sidebar.warning(f"Coluna '{COLUNA_TIPO_DE_VOO}' (Tipo de Voo) n√£o encontrada nos dados. Este filtro e gr√°ficos relacionados n√£o ser√£o exibidos.")

    # --- 5. Aplica√ß√£o dos Filtros ---
    # Filtra o DataFrame com base nas sele√ß√µes do usu√°rio
    df_filtrado = df[
        (df['Ano'].isin(ano_selecionado)) &
        (df['M√™s'].isin(meses_selecionados))
    ]

    # Aplica o filtro de Tipo de Voo se a coluna existir e o filtro foi selecionado
    if tipo_voo_selecionado is not None and COLUNA_TIPO_DE_VOO in df_filtrado.columns:
        df_filtrado = df_filtrado[df_filtrado[COLUNA_TIPO_DE_VOO].isin(tipo_voo_selecionado)]

    # Exibir mensagem se n√£o houver dados ap√≥s a filtragem
    if df_filtrado.empty:
        st.warning("üö´ Nenhum dado encontrado com os filtros selecionados. Por favor, ajuste os filtros ou verifique os dados.")
    else:
        # --- 6. M√©tricas Chave ---
        st.subheader("üìä M√©tricas Chave")
        # Cria tr√™s colunas para exibir as m√©tricas lado a lado
        col1, col2, col3 = st.columns(3)

        # Calcula e exibe o total de passageiros no per√≠odo filtrado
        total_passageiros = df_filtrado['Passageiros'].sum()
        col1.metric("Total de Passageiros", f"{total_passageiros:,.0f}")

        # M√©dia de passageiros por m√™s no per√≠odo filtrado
        media_passageiros_mes = df_filtrado.groupby('Data')['Passageiros'].sum().mean()
        col2.metric("M√©dia de Passageiros por M√™s", f"{media_passageiros_mes:,.0f}")

        # N√∫mero de anos √∫nicos filtrados
        num_anos_filtrados = len(df_filtrado['Ano'].unique())
        col3.metric("Anos Analisados", num_anos_filtrados)


        # --- 7. Visualiza√ß√µes de Dados (Gr√°ficos) ---
        st.subheader("üìà Visualiza√ß√µes de Dados")

        # Gr√°fico de Linha: Tr√°fego de Passageiros ao Longo do Tempo
        st.markdown("#### Tr√°fego Total de Passageiros por M√™s/Ano")
        # Agrupa por data para garantir um ponto por m√™s/ano e soma os passageiros
        df_time_series = df_filtrado.groupby('Data')['Passageiros'].sum().reset_index()
        fig_time_series = px.line(
            df_time_series,
            x='Data',
            y='Passageiros',
            title='Evolu√ß√£o do Tr√°fego de Passageiros ao Longo do Tempo',
            labels={'Passageiros': 'N√∫mero de Passageiros', 'Data': 'Data'},
            markers=True # Adiciona marcadores nos pontos de dados para melhor visualiza√ß√£o
        )
        fig_time_series.update_layout(hovermode="x unified") # Melhora a interatividade ao passar o mouse
        st.plotly_chart(fig_time_series, use_container_width=True) # Exibe o gr√°fico, usando a largura total do cont√™iner

        # Gr√°fico de Barras: Passageiros por Tipo de Voo (se a coluna existir)
        # Usa a constante COLUNA_TIPO_DE_VOO
        if COLUNA_TIPO_DE_VOO in df.columns:
            st.markdown("#### Distribui√ß√£o de Passageiros por Tipo de Voo")
            # Agrupa os dados por 'Tipo de Voo' e soma os passageiros
            df_type_of_flight = df_filtrado.groupby(COLUNA_TIPO_DE_VOO)['Passageiros'].sum().reset_index()
            fig_type_of_flight = px.bar(
                df_type_of_flight,
                x=COLUNA_TIPO_DE_VOO,
                y='Passageiros',
                title=f'Passageiros por {COLUNA_TIPO_DE_VOO}', # T√≠tulo din√¢mico
                labels={'Passageiros': 'N√∫mero de Passageiros', COLUNA_TIPO_DE_VOO: COLUNA_TIPO_DE_VOO},
                color=COLUNA_TIPO_DE_VOO # Usa cores diferentes para cada tipo de voo
            )
            st.plotly_chart(fig_type_of_flight, use_container_width=True)

        # Gr√°fico de Barras: Tr√°fego M√©dio de Passageiros por M√™s (Agregado por todos os anos filtrados)
        st.markdown("#### Tr√°fego M√©dio de Passageiros por M√™s (Sazonalidade)")
        # Calcula a m√©dia de passageiros por m√™s, reindexando para manter a ordem cronol√≥gica dos meses
        # Filtra apenas os meses que ainda existem no df_filtrado para evitar NaNs no gr√°fico se meses foram removidos
        valid_months_in_filtered_df = [m for m in month_order if m in df_filtrado['M√™s'].unique()]
        df_monthly_avg = df_filtrado.groupby('M√™s')['Passageiros'].mean().reindex(valid_months_in_filtered_df).reset_index()
        fig_monthly_avg = px.bar(
            df_monthly_avg,
            x='M√™s',
            y='Passageiros',
            title='M√©dia de Passageiros por M√™s',
            labels={'Passageiros': 'M√©dia de Passageiros', 'M√™s': 'M√™s'},
            color='M√™s', # Usa cores diferentes para cada m√™s
            category_orders={"M√™s": valid_months_in_filtered_df} # Garante a ordem correta dos meses no eixo X
        )
        st.plotly_chart(fig_monthly_avg, use_container_width=True)


        # --- 8. An√°lise Descritiva ---
        st.subheader("üî¨ An√°lise Descritiva dos Dados Filtrados")
        st.write("Aqui voc√™ pode ver estat√≠sticas descritivas para o n√∫mero de passageiros no per√≠odo e filtros selecionados. Estas medidas fornecem um resumo estat√≠stico dos dados.")

        # Gera estat√≠sticas descritivas para a coluna 'Passageiros'
        desc_stats = df_filtrado['Passageiros'].describe().to_frame()
        st.dataframe(desc_stats)

        st.markdown("""
        **Interpreta√ß√£o das Estat√≠sticas:**
        * **count:** O n√∫mero de observa√ß√µes (registros) n√£o nulas na coluna 'Passageiros' do conjunto de dados filtrado.
        * **mean (m√©dia):** A m√©dia aritm√©tica do n√∫mero de passageiros. Indica o valor central dos dados.
        * **std (desvio padr√£o):** Uma medida da dispers√£o ou variabilidade dos dados em torno da m√©dia. Um valor alto indica que os pontos de dados est√£o espalhados por uma ampla gama de valores.
        * **min (m√≠nimo):** O menor n√∫mero de passageiros registrado no conjunto de dados filtrado.
        * **25% (primeiro quartil):** O valor abaixo do qual 25% dos dados se encontram.
        * **50% (mediana):** O valor do meio do conjunto de dados quando ordenado. √â menos sens√≠vel a valores extremos (outliers) do que a m√©dia.
        * **75% (terceiro quartil):** O valor abaixo do qual 75% dos dados se encontram.
        * **max (m√°ximo):** O maior n√∫mero de passageiros registrado no conjunto de dados filtrado.
        """)

        # --- 9. Tabela de Dados Filtrados ---
        st.subheader("üìã Tabela de Dados Filtrados")
        st.write("Visualize os dados brutos ap√≥s a aplica√ß√£o dos filtros.")
        # Exibe o DataFrame filtrado, ordenado por data para facilitar a leitura
        # Verifica se 'Tipo de Voo' existe antes de incluir na tabela final
        cols_to_display = ['Ano', 'M√™s', 'Passageiros', 'Data']
        if COLUNA_TIPO_DE_VOO in df_filtrado.columns:
            cols_to_display.insert(2, COLUNA_TIPO_DE_VOO) # Adiciona 'Tipo de Voo' antes de 'Passageiros'
        st.dataframe(df_filtrado[cols_to_display].sort_values(by='Data'))
