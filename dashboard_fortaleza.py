import pandas as pd
import streamlit as st
import plotly.express as px
import os # Importa o m√≥dulo os para verificar a exist√™ncia do arquivo

# --- 1. Configura√ß√µes Iniciais e Mapeamento de Meses ---

# Define um mapeamento de nomes de meses para n√∫meros para garantir a ordena√ß√£o correta nos gr√°ficos
month_to_num = {
    'Janeiro': 1, 'Fevereiro': 2, 'Mar√ßo': 3, 'Abril': 4, 'Maio': 5, 'Junho': 6,
    'Julho': 7, 'Agosto': 8, 'Setembro': 9, 'Outubro': 10, 'Novembro': 11, 'Dezembro': 12
}
# Define a ordem dos meses para filtros e gr√°ficos
month_order = list(month_to_num.keys())

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Dashboard de Tr√°fego A√©reo - Fortaleza", # T√≠tulo que aparece na aba do navegador
    layout="wide", # Define o layout da p√°gina como 'wide' para usar toda a largura dispon√≠vel
    initial_sidebar_state="expanded" # Faz com que a barra lateral comece expandida
)

st.title("‚úàÔ∏è Dashboard Interativo de Tr√°fego A√©reo - Fortaleza")
st.markdown("Este dashboard apresenta uma an√°lise do tr√°fego tur√≠stico a√©reo no Aeroporto de Fortaleza, Cear√°.")

# --- 2. Carregamento dos Dados ---
# Tenta carregar o arquivo CSV. Se o arquivo n√£o for encontrado, usa dados de exemplo para demonstra√ß√£o.
file_path = "TABELA ATUALIZADA.xlsx - Planilha1.csv"
df = pd.DataFrame() # Inicializa df para evitar erro se nenhum dado for carregado
try:
    # Carrega o arquivo CSV para um DataFrame pandas
    df = pd.read_csv(file_path)
    st.success(f"Dados carregados com sucesso de '{file_path}'!")
    st.info("‚ö†Ô∏è **Importante:** Este dashboard espera as colunas 'Ano', 'M√™s', 'Total Passageiros', 'Nacional', 'Internacional'.")
    
    # --- RENOMEAR COLUNAS PARA PADRONIZA√á√ÉO ---
    # Renomeia 'Total Passageiros' para 'Passageiros' para ser usado no c√≥digo
    df = df.rename(columns={'Total Passageiros': 'Passageiros'})
    
    # --- LINHA PARA DEBUGAR: MOSTRAR NOMES DAS COLUNAS (TEMPOR√ÅRIO) ---
    st.subheader("üí° **DEBUG:** Nomes das Colunas Ap√≥s Renomea√ß√£o:")
    st.write(df.columns.tolist()) # Isso exibir√° a lista exata de nomes das colunas no seu dashboard
    st.markdown("---") # Separador para facilitar a leitura
    # --- FIM DA LINHA DE DEBUG ---

except FileNotFoundError:
    st.error(f"Arquivo '{file_path}' n√£o encontrado. Carregando dados de exemplo para demonstra√ß√£o.")
    # Dados de exemplo para demonstra√ß√£o caso o arquivo n√£o seja encontrado.
    # Estes dados simulam a estrutura esperada do seu CSV com as novas colunas.
    data = {
        'Ano': [2022, 2022, 2022, 2022, 2023, 2023, 2023, 2023, 2024, 2024, 2024, 2024],
        'M√™s': ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril'],
        'Total Passageiros': [15000, 7000, 18000, 9000, 16000, 8000, 19000, 9500, 17000, 8500, 20000, 10000],
        'Nacional': [10000, 5000, 12000, 6000, 11000, 6500, 13000, 7000, 12000, 7500, 14000, 8000],
        'Internacional': [5000, 2000, 6000, 3000, 5000, 1500, 6000, 2500, 5000, 1000, 6000, 2000],
        'Dom√©stico': [10000, 5000, 12000, 6000, 11000, 6500, 13000, 7000, 12000, 7500, 14000, 8000] # Incluindo para exemplo
    }
    df = pd.DataFrame(data)
    # Renomear para manter a consist√™ncia com o resto do c√≥digo
    df = df.rename(columns={'Total Passageiros': 'Passageiros'})
    st.warning("Por favor, substitua os dados de exemplo pelos seus dados reais para uma an√°lise completa.")


# --- 3. Pr√©-processamento dos Dados (Com Verifica√ß√µes e Corre√ß√µes Robustas) ---
if not df.empty:
    st.subheader("üõ†Ô∏è Verifica√ß√£o e Limpeza dos Dados")

    # Mostrar as primeiras linhas do DF e seus tipos de dados antes do processamento
    st.write("#### 1. Dados Brutos (Primeiras Linhas):")
    st.dataframe(df.head())
    st.write("#### 2. Tipos de Dados Originais:")
    st.text(df.dtypes) # Usar st.text para exibir dtypes no dashboard

    # --- Limpeza e Valida√ß√£o da coluna 'M√™s' ---
    if 'M√™s' in df.columns:
        # Remove espa√ßos em branco e capitaliza a primeira letra de CADA PALAVRA
        df['M√™s'] = df['M√™s'].astype(str).str.strip().str.title()
        st.write("#### 3. Valores √önicos da Coluna 'M√™s' Ap√≥s Limpeza:")
        st.text(df['M√™s'].unique()) # Mostrar os meses √∫nicos ap√≥s a limpeza
    else:
        st.error("‚ùå Erro Cr√≠tico: Coluna 'M√™s' n√£o encontrada no seu arquivo CSV. Por favor, verifique o nome da coluna no seu CSV.")
        st.stop() # Para a execu√ß√£o se a coluna crucial estiver faltando

    # --- Valida√ß√£o e Convers√£o da coluna 'Ano' ---
    if 'Ano' in df.columns:
        # Tenta converter 'Ano' para num√©rico, for√ßando erros para NaN e depois removendo-os
        df['Ano'] = pd.to_numeric(df['Ano'], errors='coerce')
        if df['Ano'].isnull().any():
            st.warning("‚ö†Ô∏è Foram encontrados valores n√£o num√©ricos ou em branco na coluna 'Ano'. As linhas com problemas ser√£o removidas.")
            df.dropna(subset=['Ano'], inplace=True)
        # Tenta converter para inteiro AP√ìS a limpeza de NaNs. Se falhar, √© porque h√° valores n√£o-inteiros.
        try:
            df['Ano'] = df['Ano'].astype(int)
        except ValueError:
            st.error("‚ùå Erro: Coluna 'Ano' cont√©m valores que n√£o podem ser convertidos para inteiro ap√≥s a limpeza de NaNs. Verifique os dados brutos.")
            st.dataframe(df[df['Ano'].apply(lambda x: not isinstance(x, (int, float))) | df['Ano'].isnull()])
            st.stop()
    else:
        st.error("‚ùå Erro Cr√≠tico: Coluna 'Ano' n√£o encontrada no seu arquivo CSV. Por favor, verifique o nome da coluna no seu CSV.")
        st.stop()
    
    # --- Valida√ß√£o da coluna 'Passageiros' (agora 'Total Passageiros' original) ---
    if 'Passageiros' in df.columns: # J√° renomeado de 'Total Passageiros'
        df['Passageiros'] = pd.to_numeric(df['Passageiros'], errors='coerce')
        if df['Passageiros'].isnull().any():
            st.warning("‚ö†Ô∏è Foram encontrados valores n√£o num√©ricos ou em branco na coluna 'Passageiros' (Total Passageiros). As linhas com problemas ser√£o removidas.")
            df.dropna(subset=['Passageiros'], inplace=True)
    else:
        st.error("‚ùå Erro Cr√≠tico: Coluna 'Passageiros' (Total Passageiros) n√£o encontrada no seu CSV ap√≥s a renomea√ß√£o. Por favor, verifique o nome da coluna original.")
        st.stop()

    # --- Valida√ß√£o das colunas 'Nacional' e 'Internacional' ---
    if 'Nacional' in df.columns and 'Internacional' in df.columns:
        df['Nacional'] = pd.to_numeric(df['Nacional'], errors='coerce').fillna(0)
        df['Internacional'] = pd.to_numeric(df['Internacional'], errors='coerce').fillna(0)
    else:
        st.warning("‚ö†Ô∏è Colunas 'Nacional' ou 'Internacional' n√£o encontradas. Gr√°ficos de tipo de voo podem n√£o ser exibidos.")

    # Cria uma coluna num√©rica para o m√™s usando o mapeamento
    df['M√™s_Num'] = df['M√™s'].map(month_to_num)

    # --- Verifica√ß√£o de M√™s_Num ap√≥s mapeamento ---
    if df['M√™s_Num'].isnull().any():
        st.warning("‚ö†Ô∏è Foram encontrados meses no seu CSV que N√ÉO PUDERAM SER MAPEADOS (resultaram em NaN). Verifique a coluna 'M√™s' para typos ou formatos inesperados.")
        st.dataframe(df[df['M√™s_Num'].isnull()]) # Mostra as linhas com problema
        df.dropna(subset=['M√™s_Num'], inplace=True)
        st.info("Linhas com meses inv√°lidos (n√£o mapeados) foram removidas para evitar erros.")

    # Tenta converter M√™s_Num para inteiro AP√ìS a limpeza de NaNs
    try:
        df['M√™s_Num'] = df['M√™s_Num'].astype(int)
    except ValueError:
        st.error("‚ùå Erro: Coluna 'M√™s_Num' cont√©m valores que n√£o podem ser convertidos para inteiro ap√≥s a limpeza de NaNs. Verifique os dados brutos.")
        st.dataframe(df[df['M√™s_Num'].apply(lambda x: not isinstance(x, (int, float))) | df['M√™s_Num'].isnull()])
        st.stop()

    # --- Cria√ß√£o e Valida√ß√£o da coluna 'Data' ---
    # Agora Ano e M√™s_Num devem ser inteiros limpos
    date_strings_series = df['Ano'].astype(str) + '-' + df['M√™s_Num'].astype(str) + '-01'
    
    # DEBUG: Mostrar as strings que est√£o sendo passadas para pd.to_datetime
    st.write("#### 6. DEBUG: Primeiras strings de data para convers√£o:")
    st.text(date_strings_series.head().to_string())

    df['Data'] = pd.to_datetime(
        date_strings_series, # Passando a s√©rie de strings j√° constru√≠da
        errors='coerce' # 'coerce' will turn invalid parsing into NaT (Not a Time)
    )

    # --- Verifica√ß√£o de Data ap√≥s convers√£o ---
    if df['Data'].isnull().any():
        st.warning("‚ö†Ô∏è Foram encontradas datas inv√°lidas (NaT) ap√≥s a convers√£o. As linhas com datas inv√°lidas ser√£o removidas para evitar erros nos gr√°ficos.")
        st.dataframe(df[df['Data'].isnull()]) # Mostra as linhas com datas problem√°ticas
        df.dropna(subset=['Data'], inplace=True) # Remover linhas com datas inv√°lidas
    
    # Verifica o tipo final da coluna 'Data' para garantir que √© datetime
    if not pd.api.types.is_datetime64_any_dtype(df['Data']):
        st.error("‚ùå Erro Final: A coluna 'Data' n√£o foi convertida para o tipo datetime. Isso indica um problema grave nos dados de Ano ou M√™s que n√£o p√¥de ser corrigido.")
        st.stop() # Para a execu√ß√£o se a coluna cr√≠tica n√£o for do tipo correto

    # Ordena o DataFrame pela coluna 'Data' para garantir a correta exibi√ß√£o nos gr√°ficos de tempo
    df = df.sort_values(by='Data')
    
    st.write("#### 7. Dados Processados (Primeiras Linhas e Tipos Finais):")
    st.dataframe(df.head())
    st.write("#### 8. Tipos de Dados Finais:")
    st.text(df.dtypes)

    # --- 4. Prepara√ß√£o para Gr√°ficos de Tipo de Voo (Nacional/Internacional) ---
    # Cria um DataFrame 'derretido' para facilitar a filtragem e visualiza√ß√£o por tipo de voo
    if 'Nacional' in df.columns and 'Internacional' in df.columns:
        df_tipo_voo_melted = df.melt(
            id_vars=['Ano', 'M√™s', 'M√™s_Num', 'Data'], # Colunas de identifica√ß√£o
            value_vars=['Nacional', 'Internacional'], # Colunas a serem 'derretidas'
            var_name='Tipo de Voo', # Novo nome da coluna para as categorias 'Nacional'/'Internacional'
            value_name='Passageiros_por_Tipo' # Novo nome da coluna para os valores correspondentes
        )
        # Garante que 'Passageiros_por_Tipo' √© num√©rico
        df_tipo_voo_melted['Passageiros_por_Tipo'] = pd.to_numeric(df_tipo_voo_melted['Passageiros_por_Tipo'], errors='coerce').fillna(0)
        # st.dataframe(df_tipo_voo_melted.head()) # DEBUG
    else:
        df_tipo_voo_melted = pd.DataFrame() # DataFrame vazio se as colunas n√£o existirem
        st.warning("Colunas 'Nacional' ou 'Internacional' n√£o encontradas para gr√°ficos de tipo de voo.")


# --- 5. Barra Lateral para Filtros ---
# S√≥ exibe os filtros se o DataFrame n√£o estiver vazio ap√≥s o pr√©-processamento
if not df.empty:
    st.sidebar.header("‚öôÔ∏è Filtros de An√°lise")

    # Filtro por Ano: Permite selecionar um ou mais anos
    anos_disponiveis = sorted(df['Ano'].unique())
    ano_selecionado = st.sidebar.multiselect(
        "Selecione o(s) Ano(s)",
        options=anos_disponiveis,
        default=anos_disponiveis # Por padr√£o, todos os anos s√£o selecionados
    )

    # Filtro por M√™s: Permite selecionar um ou mais meses
    meses_selecionados = st.sidebar.multiselect(
        "Selecione o(s) M√™s(es)",
        options=month_order, # Usa a ordem predefinida dos meses
        default=month_order # Por padr√£o, todos os meses s√£o selecionados
    )

    # Filtro por Tipo de Voo (usando df_tipo_voo_melted)
    tipo_voo_selecionado = None
    if not df_tipo_voo_melted.empty:
        tipos_voo_disponiveis = df_tipo_voo_melted['Tipo de Voo'].unique()
        tipo_voo_selecionado = st.sidebar.multiselect(
            "Selecione o Tipo de Voo (Nacional/Internacional)",
            options=tipos_voo_disponiveis,
            default=tipos_voo_disponiveis # Por padr√£o, todos os tipos de voo s√£o selecionados
        )

    # --- 6. Aplica√ß√£o dos Filtros ---
    # Filtra o DataFrame principal para m√©tricas e gr√°fico de linha total
    df_filtrado_principal = df[
        (df['Ano'].isin(ano_selecionado)) &
        (df['M√™s'].isin(meses_selecionados))
    ]

    # Filtra o DataFrame 'derretido' para o gr√°fico de tipo de voo
    df_filtrado_tipo_voo = df_tipo_voo_melted[
        (df_tipo_voo_melted['Ano'].isin(ano_selecionado)) &
        (df_tipo_voo_melted['M√™s'].isin(meses_selecionados))
    ]
    if tipo_voo_selecionado is not None and not df_filtrado_tipo_voo.empty:
        df_filtrado_tipo_voo = df_filtrado_tipo_voo[df_filtrado_tipo_voo['Tipo de Voo'].isin(tipo_voo_selecionado)]


    # Exibir mensagem se n√£o houver dados ap√≥s a filtragem
    if df_filtrado_principal.empty:
        st.warning("üö´ Nenhum dado encontrado com os filtros selecionados. Por favor, ajuste os filtros ou verifique os dados.")
    else:
        # --- 7. M√©tricas Chave ---
        st.subheader("üìä M√©tricas Chave")
        # Cria tr√™s colunas para exibir as m√©tricas lado a lado
        col1, col2, col3 = st.columns(3)

        # Calcula e exibe o total de passageiros no per√≠odo filtrado
        total_passageiros = df_filtrado_principal['Passageiros'].sum()
        col1.metric("Total de Passageiros", f"{total_passageiros:,.0f}")

        # M√©dia de passageiros por m√™s no per√≠odo filtrado
        media_passageiros_mes = df_filtrado_principal.groupby('Data')['Passageiros'].sum().mean()
        col2.metric("M√©dia de Passageiros por M√™s", f"{media_passageiros_mes:,.0f}")

        # N√∫mero de anos √∫nicos filtrados
        num_anos_filtrados = len(df_filtrado_principal['Ano'].unique())
        col3.metric("Anos Analisados", num_anos_filtrados)


        # --- 8. Visualiza√ß√µes de Dados (Gr√°ficos) ---
        st.subheader("üìà Visualiza√ß√µes de Dados")

        # Gr√°fico de Linha: Tr√°fego de Passageiros ao Longo do Tempo (Total)
        st.markdown("#### Tr√°fego Total de Passageiros por M√™s/Ano")
        # Agrupa por data para garantir um ponto por m√™s/ano e soma os passageiros
        df_time_series = df_filtrado_principal.groupby('Data')['Passageiros'].sum().reset_index()
        fig_time_series = px.line(
            df_time_series,
            x='Data',
            y='Passageiros',
            title='Evolu√ß√£o do Tr√°fego Total de Passageiros',
            labels={'Passageiros': 'N√∫mero de Passageiros', 'Data': 'Data'},
            markers=True # Adiciona marcadores nos pontos de dados para melhor visualiza√ß√£o
        )
        fig_time_series.update_layout(hovermode="x unified") # Melhora a interatividade ao passar o mouse
        st.plotly_chart(fig_time_series, use_container_width=True) # Exibe o gr√°fico, usando a largura total do cont√™iner

        # Gr√°fico de Barras: Passageiros por Tipo de Voo (Nacional/Internacional)
        if not df_filtrado_tipo_voo.empty:
            st.markdown("#### Distribui√ß√£o de Passageiros por Tipo de Voo (Nacional/Internacional)")
            # Agrupa os dados por 'Tipo de Voo' e soma os passageiros
            df_type_of_flight_agg = df_filtrado_tipo_voo.groupby('Tipo de Voo')['Passageiros_por_Tipo'].sum().reset_index()
            fig_type_of_flight = px.bar(
                df_type_of_flight_agg,
                x='Tipo de Voo',
                y='Passageiros_por_Tipo',
                title='Passageiros por Tipo de Voo',
                labels={'Passageiros_por_Tipo': 'N√∫mero de Passageiros', 'Tipo de Voo': 'Tipo de Voo'},
                color='Tipo de Voo' # Usa cores diferentes para cada tipo de voo
            )
            st.plotly_chart(fig_type_of_flight, use_container_width=True)
        else:
            st.info("Dados para o gr√°fico de 'Tipo de Voo' n√£o dispon√≠veis com os filtros selecionados ou colunas ausentes.")


        # Gr√°fico de Barras: Tr√°fego M√©dio de Passageiros por M√™s (Total Agregado)
        st.markdown("#### Tr√°fego M√©dio de Passageiros por M√™s (Sazonalidade - Total)")
        # Calcula a m√©dia de passageiros por m√™s, reindexando para manter a ordem cronol√≥gica dos meses
        valid_months_in_filtered_df = [m for m in month_order if m in df_filtrado_principal['M√™s'].unique()]
        df_monthly_avg = df_filtrado_principal.groupby('M√™s')['Passageiros'].mean().reindex(valid_months_in_filtered_df).reset_index()
        fig_monthly_avg = px.bar(
            df_monthly_avg,
            x='M√™s',
            y='Passageiros',
            title='M√©dia de Passageiros por M√™s',
            labels={'Passageiros': 'M√©dia de Passageiros', 'M√™s': 'M√™s'},
            color='M√™s', # Usa cores diferentes para cada m√™s
            category_orders={"M√™s": valid_months_in_filtered_df} # Garante a ordem correta dos meses no eixo X
        )
        st.plotly_chart(fig_monthly_avg, use_container_width=True)


        # --- 9. An√°lise Descritiva ---
        st.subheader("üî¨ An√°lise Descritiva dos Dados Filtrados (Total de Passageiros)")
        st.write("Aqui voc√™ pode ver estat√≠sticas descritivas para o n√∫mero total de passageiros no per√≠odo e filtros selecionados.")

        # Gera estat√≠sticas descritivas para a coluna 'Passageiros'
        desc_stats = df_filtrado_principal['Passageiros'].describe().to_frame()
        st.dataframe(desc_stats)

        st.markdown("""
        **Interpreta√ß√£o das Estat√≠sticas:**
        * **count:** O n√∫mero de observa√ß√µes (registros) n√£o nulas na coluna 'Passageiros'.
        * **mean (m√©dia):** A m√©dia aritm√©tica do n√∫mero de passageiros.
        * **std (desvio padr√£o):** Medida da dispers√£o dos dados.
        * **min (m√≠nimo):** O menor n√∫mero de passageiros registrado.
        * **25%, 50% (mediana), 75% (terceiro quartil):** Indicam a distribui√ß√£o dos dados.
        * **max (m√°ximo):** O maior n√∫mero de passageiros registrado.
        """)

        # --- 10. Tabela de Dados Filtrados ---
        st.subheader("üìã Tabela de Dados Filtrados")
        st.write("Visualize os dados brutos principais ap√≥s a aplica√ß√£o dos filtros.")
        # Exibe o DataFrame filtrado, ordenado por data para facilitar a leitura
        # Inclui todas as colunas relevantes que existem no DataFrame principal
        cols_to_display_main_df = ['Ano', 'M√™s', 'Passageiros', 'Nacional', 'Internacional', 'Data']
        # Adiciona 'Dom√©stico' se presente
        if 'Dom√©stico' in df_filtrado_principal.columns:
            cols_to_display_main_df.insert(cols_to_display_main_df.index('Internacional') + 1, 'Dom√©stico')

        # Filtra as colunas que realmente existem no df_filtrado_principal
        final_cols_to_display = [col for col in cols_to_display_main_df if col in df_filtrado_principal.columns]
        
        st.dataframe(df_filtrado_principal[final_cols_to_display].sort_values(by='Data'))
